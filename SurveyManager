function start(){
  
  // Define sheet names as variables
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var master = ss.getSheetByName("master");
  var gantt = ss.getSheetByName("gantt");
  var startpage = ss.getSheetByName("Getting Started");
  var task_summary = ss.getSheetByName("task_summary");
  var empty_template = ss.getSheetByName("empty_template");
  var create_template = ss.getSheetByName("create_template");
  var grds_input = ss.getSheetByName("grds_input");
  
 
  // Make master sheet active
  master.showSheet();
  ss.setActiveSheet(master);
  // Delete prefilled data if existis
  master.getRange("C3:C11").setValue("");
  master.getRange("E16:F65").setValue("");
  // Set CountryName
  var country = startpage.getRange("F66").getValue();
  master.getRange("C2").setValue(country);
  
  // add RQ and Finpro detials for Ghana in the master

  if(country == "Ghana"){
         master.getRange("E12").setValue("Ghana Research Quality Team");
         master.getRange("E13").setValue("Ghana Finance and Procurement Team");
         master.getRange("F12").setValue("mbidinlib@poverty-action.org");
         master.getRange("F13").setValue("finprocgh@poverty-action.org");
         master.getRange("E12:E13").setBackground("#d9e2f3")
         master.getRange("E12:F13").setBorder(true, true, true, true, true, true)
   }
 
  // Make other sheets visible
  
  // gantt and taks summary
  task_summary.showSheet();
  gantt.showSheet();
  //  project open and close
  empty_template.copyTo(ss).setName("project_open");
  create_template.copyTo(ss).setName("project_close");
  ss.getSheetByName("project_close").showSheet();
  ss.getSheetByName("project_open").showSheet();
 
  var project_open = ss.getSheetByName("project_open");
  var project_close = ss.getSheetByName("project_close");
 
  
  //**** Populating project Open****//
  
  var range_pc = project_open.getRange("C2:C200");
  var range_gi = grds_input.getRange("A2:A200");
  var range_pc1 = project_open.getRange("B2:B200");
  var range_gi1 = grds_input.getRange("C2:C200");
  var range_pc2 = project_open.getRange("F2:H200");
  var range_gi2 = grds_input.getRange("F2:H200");
  range_gi.copyTo(range_pc,{contentsOnly:true});
  range_gi1.copyTo(range_pc1,{contentsOnly:true});
  range_gi2.copyTo(range_pc2,{contentsOnly:true});
  var num_rows = grds_input.getRange("T2").getValue();   
       
      //Removing activities that dont belong here
  project_open.getRange('G1:H200').createFilter();
  
  var criteria = SpreadsheetApp.newFilterCriteria().setHiddenValues(['project_open']).build();
  project_open.getFilter().setColumnFilterCriteria(7, criteria);
  project_open.deleteRows(3,num_rows);
  project_open.getFilter().removeColumnFilterCriteria(7);
  
  var criteria1 = SpreadsheetApp.newFilterCriteria().setHiddenValues(['General', country]).build();
  project_open.getFilter().setColumnFilterCriteria(8, criteria1);
  project_open.deleteRows(3,num_rows);
 
  project_open.getRange('F2:H102').clear({contentsOnly: true, skipFilteredRows: false});
  project_open.getFilter().remove();
  
  //Bold and remove some data validations
  project_open.getRange('B2').setFontWeight('bold');
  project_open.getRange('A2').clearDataValidations(); 

  
  
  //*****Populating project close sheet****//
  //***************************************//
  
  var range_pc = project_close.getRange("C2:C200");
  var range_gi = grds_input.getRange("A2:A200");
  var range_pc1 = project_close.getRange("B2:B200");
  var range_gi1 = grds_input.getRange("C2:C200");
  var range_pc2 = project_close.getRange("F2:H200");
  var range_gi2 = grds_input.getRange("F2:H200");
    
  range_gi.copyTo(range_pc,{contentsOnly:true});
  range_gi1.copyTo(range_pc1,{contentsOnly:true});
  range_gi2.copyTo(range_pc2,{contentsOnly:true});
  var num_rows = grds_input.getRange("T2").getValue();
  
  //Removing activities that dont belong here
  project_close.getRange('G1:H200').createFilter();
  var criteria = SpreadsheetApp.newFilterCriteria().setHiddenValues(['project_close']).build();
  project_close.getFilter().setColumnFilterCriteria(7, criteria);
  project_close.deleteRows(3,num_rows);
  project_close.getFilter().removeColumnFilterCriteria(7);
  
  var criteria1 = SpreadsheetApp.newFilterCriteria().setHiddenValues(['General', country]).build();
  project_close.getFilter().setColumnFilterCriteria(8, criteria1);
  project_close.deleteRows(3,num_rows);
  
  project_close.getRange('F2:H102').clear({contentsOnly: true, skipFilteredRows: false});
  project_close.getFilter().remove();
  //Bold and remove some data validations
  project_close.getRange('B2').setFontWeight('bold');
  project_close.getRange('A2').clearDataValidations();
  

  
  // Reorder sheets
  
  
  ss.setActiveSheet(project_open)
  SpreadsheetApp.getActiveSpreadsheet().moveActiveSheet(2); 
  ss.setActiveSheet(project_close)
  SpreadsheetApp.getActiveSpreadsheet().moveActiveSheet(3);
  ss.setActiveSheet(gantt)
  SpreadsheetApp.getActiveSpreadsheet().moveActiveSheet(4);
  ss.setActiveSheet(task_summary)
  SpreadsheetApp.getActiveSpreadsheet().moveActiveSheet(5);
  ss.setActiveSheet(master)
  SpreadsheetApp.getActiveSpreadsheet().moveActiveSheet(1);
  
  // Set master as active sheet
  ss.setActiveSheet(master);  
  
  // Hide Getting Started sheet
  startpage.hideSheet() 
  
}




// Get back to StartPage

function getback(){

  
  // Message Box to confirm deletion of sheets and returning to getting started 
  
  var name = Browser.msgBox("Restart Alert!","Are you sure you want to restart? Continuing will delete all sheets and progress", Browser.Buttons.OK_CANCEL);
  
  if (name == "ok"){
   
    // Define sheet names
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var startpage = ss.getSheetByName("Getting Started")
    var master = ss.getSheetByName("master");
    var gantt = ss.getSheetByName("gantt");
    var project_open = ss.getSheetByName("project_open");
    var project_close = ss.getSheetByName("project_close");
    var task_sumary = ss.getSheetByName("task_summary");
    
    // Make Getting Started sheet active
    startpage.showSheet();
    ss.setActiveSheet(startpage);
    
    // Hide and delete sheets
    gantt.hideSheet();
    task_sumary.hideSheet();
    ss.deleteSheet(project_open)
    ss.deleteSheet(project_close)
    // Delete created sheets and hide other sheets
    
    // Reformat and Hide Master sheet
    var master = ss.getSheetByName("master");
    master.getRange("E12:E13").setBackground("");
    master.getRange("E12:F13").setValue("");
    master.getRange("E12:F13").setBorder(false, false, false, false, false,false);
    master.getRange("E12:F12").setBorder(true, false, false, false, false, false)
    master.hideSheet()
  
  }
  
  
}




// Function to update sheetes and rows

function onEdit(e) {
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var gant = ss.getSheetByName("gantt");
  var master = ss.getSheetByName("master");
  var project_open = ss.getSheetByName("project_open");
  var project_close = ss.getSheetByName("project_close");
  var health_check = ss.getSheetByName("health_check");
  var task_summary = ss.getSheetByName("task_summary");
  
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var sheetname = sheet.getSheetName();
  var name = sheetname.split("_")[1]
  
  
  //adding new line at the top
  if (name == "tasks" | name == "survey" | name == "impl" | name =="open" | name == "close") {
      var editcell = sheet.getActiveCell().getValue();
      var editcol = sheet.getActiveCell().getColumn();
      var editrow = sheet.getActiveCell().getRow();
      
      if (editcol == 1 && editcell == "New"){
          sheet.insertRowsBefore(editrow, 1);    // inserts a row before
          
          // remove new values and leave blank
          sheet.getRange(editrow+1, editcol).setValue("")
        
          //Add delete validation for new items added
          sheet.getRange(editrow, editcol).setDataValidation(null)
          var valrange = sheet.getRange(editrow, editcol);
          var rule = SpreadsheetApp.newDataValidation().requireValueInList(["Completed","New","Delete"]).build();
          valrange.setDataValidation(rule);   
      } 
     
      // Delete row that is marked as delete    
      if (editcol == 1 && editcell == "Delete"){
            sheet.deleteRow(editrow)
        } 
        
        // Change fontColor of completed tasks    
      if (editcol == 1 && editcell == "Completed"){
           var completed_range =  sheet.getRange(editrow,editcol+1)
            completed_range.setFontColor("Gray");
            var completed_task = completed_range.getValue();
            var country_name = master.getRange("C2").getValue();
        
             // Trigger an email to RQ Team (Ghana)
            if(country_name == "Ghana"){
                var project_name = master.getRange("C3").getValue();
                var rq_email = master.getRange("F12").getValue();
                var link = SpreadsheetApp.getActiveSpreadsheet().getUrl();
              
               MailApp.sendEmail(
                rq_email,                                                                
                "MyRA_Updates_"+ project_name ,                                         
                "Hello RQ Team,\n\nThere has been a recent MyRA update for " +            
                project_name + "Project. \nTask: " + completed_task + "\nAction: Completed" +
                "\nMyRA Link: " + link); 
            }     
      }
    
            
   }
   
  
}



 
function addchecklist(){

  
  function onOpen() {
    var ui = SpreadsheetApp.getUi();  
    ui.createMenu('Form')
      .addItem('add Item', 'addItem')
      .addToUi();
  }
  
  var html = HtmlService.createHtmlOutputFromFile('form');
  SpreadsheetApp.getUi() 
      .showModalDialog(html, 'Add New Checklist');
}


function addNewItem(form_data){
   // Define sheet names as variables
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var master = ss.getSheetByName("master");
  var gantt = ss.getSheetByName("gantt");
  var startpage = ss.getSheetByName("Getting Started");
  var task_summary = ss.getSheetByName("task_summary");
  var empty_template = ss.getSheetByName("empty_template");
  var create_template = ss.getSheetByName("create_template")
  
  var type = form_data.checklist_type
  var sht = form_data.sheet_name
  
  Logger.log(type)
  Logger.log(sht)
  Logger.log(sht + "_" + type)
  
  // for survey
    if(type == "survey"){
      empty_template.copyTo(ss).setName(sht + "_survey");
      var survey_sheet = ss.getSheetByName(sht + "_survey");
      var country = startpage.getRange("F66").getValue();
      var grds_input = ss.getSheetByName("grds_input");
      
       //*****Populating Created Implementation sheet****//
      var range_suv = survey_sheet.getRange("C2:C200");
      var range_gr = grds_input.getRange("A2:A200");
      var range_suv1 = survey_sheet.getRange("B2:B200");
      var range_gr1 = grds_input.getRange("C2:C200");
      var range_suv2 = survey_sheet.getRange("F2:H200");
      var range_gr2 = grds_input.getRange("F2:H200");
      
      range_gr.copyTo(range_suv,{contentsOnly:true});
      range_gr1.copyTo(range_suv1,{contentsOnly:true});
      range_gr2.copyTo(range_suv2,{contentsOnly:true});
      var num_rows = grds_input.getRange("T2").getValue();
       
      //ss.getSheetByName(sht + "_survey").showSheet();
      
      //Removing activities that dont belong here
      survey_sheet.getRange('G1:H200').createFilter();
      var criteria = SpreadsheetApp.newFilterCriteria().setHiddenValues(['template']).build();
      survey_sheet.getFilter().setColumnFilterCriteria(7, criteria);
      survey_sheet.deleteRows(2,num_rows);
      
      criteria = SpreadsheetApp.newFilterCriteria().setHiddenValues(['General', country]).build();
      survey_sheet.getFilter().setColumnFilterCriteria(8, criteria);
      survey_sheet.deleteRows(3,50);
      survey_sheet.getFilter().removeColumnFilterCriteria(8);
      survey_sheet.getRange('F2:H102').clear({contentsOnly: true, skipFilteredRows: false});
      survey_sheet.getFilter().remove();
      //Bold and remove some data validations
      survey_sheet.getRange('B2').setFontWeight('bold');
      survey_sheet.getRange('A2').clearDataValidations();
      
      //show_sheet
      ss.getSheetByName(sht + "_survey").showSheet();
      
    }
    
       //*** for implementation****//
    if(type == "impl"){
       
       empty_template.copyTo(ss).setName(sht + "_impl");
       ss.getSheetByName(sht + "_impl").showSheet();
       var imp_sheet = ss.getSheetByName(sht + "_impl")
       var country = startpage.getRange("F66").getValue();
       var grds_input = ss.getSheetByName("grds_input");
      
       //*****Populating Created Implementation sheet****//
      var range_imp  =   imp_sheet.getRange("C2:C200");
      var range_gr   =   grds_input.getRange("A2:A200");
      var range_imp1 =   imp_sheet.getRange("B2:B200");
      var range_gr1  =   grds_input.getRange("C2:C200");
      var range_imp2 =   imp_sheet.getRange("F2:H200");
      var range_gr2  =   grds_input.getRange("F2:H200");
      
      range_gr.copyTo(range_imp,{contentsOnly:true});
      range_gr1.copyTo(range_imp1,{contentsOnly:true});
      range_gr2.copyTo(range_imp2,{contentsOnly:true});
      var num_rows = grds_input.getRange("T2").getValue();
      
      //Removing activities that dont belong here
      imp_sheet.getRange('G1:H200').createFilter();
      var criteria = SpreadsheetApp.newFilterCriteria().setHiddenValues(['implement']).build();
      imp_sheet.getFilter().setColumnFilterCriteria(7, criteria);
      imp_sheet.deleteRows(2,num_rows);
      
      criteria = SpreadsheetApp.newFilterCriteria().setHiddenValues(['General', country]).build();
      imp_sheet.getFilter().setColumnFilterCriteria(8, criteria);
      imp_sheet.deleteRows(3,50);
      imp_sheet.getFilter().removeColumnFilterCriteria(8);
      imp_sheet.getRange('F2:H102').clear({contentsOnly: true, skipFilteredRows: false});
      imp_sheet.getFilter().remove();
      //Bold and remove some data validations
      imp_sheet.getRange('B2').setFontWeight('bold');
      imp_sheet.getRange('A2').clearDataValidations();
      
    }
  //form empty tasks
    if(type == "empty"){
      create_template.copyTo(ss).setName(sht + "_tasks");
      ss.getSheetByName(sht + "_tasks").showSheet();       
    }
    
  // activate newly created sheet  
  var new_sheet = ss.getSheetByName(sht + "_" + type)
  ss.setActiveSheet(new_sheet)
  ss.moveActiveSheet(3); 
}
  
 




// **** UPDATE SHEET ****\\\

function update_sheets() {
  var ss = SpreadsheetApp.getActive();
  var allsheets = ss.getSheets();
  var gantt = ss.getSheetByName("gantt");
  var freq = ss.getSheetByName("master").getRange("C11").getValue(); 
  var newval = - 8
  var newval1 = -20
  var newval2 = -3
  
  
  for (var j = 8; j <= 104; j++){
   
    //Daily Dates
    if (freq == "Daily"){
      var newval = newval + 1
      gantt.getRange(1, j).setFormula("=TODAY() + " + newval ); 
    }
    
    //Weekly Dates
     if (freq == "Weekly"){
      var newval1 = newval1 + 7
      gantt.getRange(1, j).setFormula("=TODAY() - WEEKDAY(TODAY(), 2) + " + newval1 );
    }
    
    //Monthly Dates
    
    if (freq == "Monthly"){
      var newval2 = newval2 +1
      var mon = gantt.getRange("H1").getValue();
      gantt.getRange(1, j).setFormula("=EOMONTH(TODAY()," + newval2 + ") + 1" );    
    }      
  }
 
  
  // ****** TASK SUMMATY **** \\
  
  var task_sum = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("task_summary");  
  task_sum.getRange(3, 2,500,49).setValue("");  
 
  for (var s in allsheets){
    var sheet = allsheets[s]
    var name = sheet.getSheetName();
    
    // Loops through project sheets
    if (sheet.isSheetHidden()!= true && name != "master" && name != "gantt" 
        && name != "health_check" && name !=  "task_summary") {
      var sht_name = sheet.getSheetName();  
      var sheet_n = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sht_name);
   
        //**Task Summary Overdue 
      var array = task_sum.getRange("B3:B1000").getValues();
      var start = array.filter(String).length + 3; // removes the empty values and counts the length
      sheet_n.getRange('E:E').createFilter();
      var criteria = SpreadsheetApp.newFilterCriteria()
      .setHiddenValues(['Complete','Ongoing', 'Scheduled', 'Upcoming', 'Not Scheduled']).build();    
      sheet_n.getFilter().setColumnFilterCriteria(5, criteria);
      //Populate Overdue columns
      sheet_n.getRange("B3:B140").copyTo(task_sum.getRange(start, 2, 140,1), {contentsOnly:true});
      sheet_n.getRange("D3:D140").copyTo(task_sum.getRange(start, 3, 140,1), {contentsOnly:true});
      sheet_n.getRange("F3:G140").copyTo(task_sum.getRange(start, 4, 140,2), {contentsOnly:true});
      sheet_n.getRange("H3:I140").copyTo(task_sum.getRange(start, 6, 140,2), {contentsOnly:true});
      var array = task_sum.getRange("B3:B1000").getValues();
      var start = array.filter(String).length + 3; // removes the empty values and counts the length 
      task_sum.getRange(start + 3,8,140,1).setValue("");    
      
      
      //**Task Summary Ongoing  
      var array = task_sum.getRange("J3:J1000").getValues();
      var start = array.filter(String).length + 3; // removes the empty values and counts the length
      var criteria = SpreadsheetApp.newFilterCriteria()
      .setHiddenValues(['Complete','Overdue', 'Scheduled', 'Upcoming', 'Not Scheduled']).build();    
      sheet_n.getFilter().setColumnFilterCriteria(5, criteria);      
      //Populate Ongoind columns
      sheet_n.getRange("B3:B140").copyTo(task_sum.getRange(start, 10, 140,1), {contentsOnly:true});
      sheet_n.getRange("D3:D140").copyTo(task_sum.getRange(start, 11, 140,1), {contentsOnly:true});
      sheet_n.getRange("F3:G140").copyTo(task_sum.getRange(start, 12, 140,2), {contentsOnly:true});
      sheet_n.getRange("H3:I140").copyTo(task_sum.getRange(start, 14, 140,2), {contentsOnly:true});
      var array = task_sum.getRange("J3:J1000").getValues();
      var start = array.filter(String).length + 3; // removes the empty values and counts the length 
      task_sum.getRange(start + 3,8,140,1).setValue("");    
      
       //** Task Summary Upcoming
      var array = task_sum.getRange("R3:R1000").getValues();
      var start = array.filter(String).length + 3; // removes the empty values and counts the length
      var criteria = SpreadsheetApp.newFilterCriteria()
      .setHiddenValues(['Complete','Overdue', 'Scheduled', 'Ongoing', 'Not Scheduled']).build();    
      sheet_n.getFilter().setColumnFilterCriteria(5, criteria);
      //Populate Upcoming Columns
      sheet_n.getRange("B3:B140").copyTo(task_sum.getRange(start, 18, 140,1), {contentsOnly:true});
      sheet_n.getRange("D3:D140").copyTo(task_sum.getRange(start, 19, 140,1), {contentsOnly:true});
      sheet_n.getRange("F3:G140").copyTo(task_sum.getRange(start, 20, 140,2), {contentsOnly:true});
      sheet_n.getRange("H3:I140").copyTo(task_sum.getRange(start, 22, 140,2), {contentsOnly:true});
      var array = task_sum.getRange("J3:J1000").getValues();
      var start = array.filter(String).length + 3; // removes the empty values and counts the length 
      task_sum.getRange(start + 3,8,140,1).setValue("");    
      
       //** Task Summary Complete
      var array = task_sum.getRange("Z3:Z1000").getValues();
      var start = array.filter(String).length + 3; // removes the empty values and counts the length
      var criteria = SpreadsheetApp.newFilterCriteria()
      .setHiddenValues(['Upcoming','Overdue', 'Scheduled', 'Ongoing', 'Not Scheduled']).build();    
      sheet_n.getFilter().setColumnFilterCriteria(5, criteria);
      //Populate Cmplete Columns
      sheet_n.getRange("B3:B140").copyTo(task_sum.getRange(start, 26, 140,1), {contentsOnly:true});
      sheet_n.getRange("D3:D140").copyTo(task_sum.getRange(start, 27, 140,1), {contentsOnly:true});
      sheet_n.getRange("F3:G140").copyTo(task_sum.getRange(start, 28, 140,2), {contentsOnly:true});
      sheet_n.getRange("H3:I140").copyTo(task_sum.getRange(start, 30, 140,2), {contentsOnly:true});
      var array = task_sum.getRange("Z3:Z1000").getValues();
      var start = array.filter(String).length + 3; // removes the empty values and counts the length 
      task_sum.getRange(start + 3,8,140,1).setValue("");    
           
       //** Task Summary Scheduled
      var array = task_sum.getRange("AH3:AH1000").getValues();
      var start = array.filter(String).length + 3; // removes the empty values and counts the length
      var criteria = SpreadsheetApp.newFilterCriteria()
      .setHiddenValues(['Upcoming','Overdue', 'Complete', 'Ongoing', 'Not Scheduled']).build();    
      sheet_n.getFilter().setColumnFilterCriteria(5, criteria);
      //Populate Scheduled Columns
      sheet_n.getRange("B3:B140").copyTo(task_sum.getRange(start, 34, 140,1), {contentsOnly:true});
      sheet_n.getRange("D3:D140").copyTo(task_sum.getRange(start, 35, 140,1), {contentsOnly:true});
      sheet_n.getRange("F3:G140").copyTo(task_sum.getRange(start, 36, 140,2), {contentsOnly:true});
      sheet_n.getRange("H3:I140").copyTo(task_sum.getRange(start, 38, 140,2), {contentsOnly:true});
      var array = task_sum.getRange("AH3:AH1000").getValues();
      var start = array.filter(String).length + 3; // removes the empty values and counts the length 
      task_sum.getRange(start + 3,8,140,1).setValue("");    
         
      
       //** Task Summary Not Scheduled
      var array = task_sum.getRange("AR3:AR1000").getValues();
      var start = array.filter(String).length + 3; // removes the empty values and counts the length
      var criteria = SpreadsheetApp.newFilterCriteria()
      .setHiddenValues(['Upcoming','Overdue', 'Complete', 'Ongoing', 'Not Scheduled']).build();    
      sheet_n.getFilter().setColumnFilterCriteria(5, criteria);     
      //Populate Not Schedulled columns
      sheet_n.getRange("B3:B140").copyTo(task_sum.getRange(start, 42, 140,1), {contentsOnly:true});
      sheet_n.getRange("D3:D140").copyTo(task_sum.getRange(start, 43, 140,1), {contentsOnly:true});
      sheet_n.getRange("F3:G140").copyTo(task_sum.getRange(start, 44, 140,2), {contentsOnly:true});
      sheet_n.getRange("H3:I140").copyTo(task_sum.getRange(start, 46, 140,2), {contentsOnly:true});
      task_sum.getRange("B1").setFormula('=COUNTIF(AP3:AP1000,"<>")');  
      task_sum.getRange(start,48,140,1).setValue(sht_name);
      var array = task_sum.getRange("AP3:AP1000").getValues();
      var start = array.filter(String).length + 3; // removes the empty values and counts the length 
      task_sum.getRange(start + 3,8,140,1).setValue("");    
         
      
      //************ GANTT CHART **************\
      //******* POPULATING THE GANTT CHART*****\\
      gantt.getRange("A2:G2229").setValue("");
  
      // Count the number of non-empty rows in the B column
      var array = gantt.getRange("B1:B2231").getValues();
      var start = array.filter(String).length; // removes the empty values and counts the length
      // Populate values
      sheet_n.getRange('B:B').createFilter();
      var criteria = SpreadsheetApp.newFilterCriteria()
      .setHiddenValues(['Planning', 'IRB', 'Project Close']).build();    
      sheet_n.getFilter().setColumnFilterCriteria(2, criteria)  
      sheet_n.getRange("B3:B140").copyTo(gantt.getRange(start +1 , 2, 140,1), {contentsOnly:true});
      sheet_n.getRange("D3:E140").copyTo(gantt.getRange(start +1, 3, 140,2), {contentsOnly:true});
      sheet_n.getRange("J3:J140").copyTo(gantt.getRange(start +1, 5, 140,1), {contentsOnly:true});
      sheet_n.getRange("F3:G140").copyTo(gantt.getRange(start +1, 6, 140,2), {contentsOnly:true});
      sheet_n.getFilter().remove();      
      gantt.getRange(start +1,1,140,1).setValue(sht_name);
      var array = gantt.getRange("B1:B2231").getValues();
      var start = array.filter(String).length; // removes the empty values and counts the length
      gantt.getRange(start+1,1,140,1).setValue("");
 
    }    
    
    
  }
  

}
